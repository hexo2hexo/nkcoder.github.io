---
layout: post
title: 算法练习--整数二进制中1的个数
date: 2014-05-11 23:42:05 +0800
tags: algorithm
comments: true
tags: algorithm
categories: Algorithm
---

## 1. 问题描述：

> 给定一个整数num，求num的二进制表示中1的个数；
输入：整数num；输出：num二进制表示中1的个数

## 2. 思路：

>  可以判断整数的二进制表示中每一位是否为1，即每次将整数与1进行与操作，然后整数右移一位，如果整数是正数，没问题，移位直到整数值为0，移位的次数为整数二进制的有效位数；如果整数是负数，直接循环移位，会陷入无限循环（负数最高位为1，右移时高位补符号位），此时需要完整移动32位（整数由4个字节构成）。

>  也是判断整数的每一位是否为1，但不是对整数移位，而是每次对1左移位，判断整数对应的位上是否为1；移位的次数为整数二进制的有效位数。

> n&(n-1)：每次消掉n最低位上的1，直到结果为0，比较的次数为整数二进制中1的个数。此方位最优。

## 3. Java参考代码

	/**
	 * 通过n&(n-1)，每次可以消掉n的二进制表示中最低位上的1，比较
     * 的次数为n二进制中1的个数。
	 * @param num
	 * @return
	 */
	private int getOneBitNum(int num) {
		int count = 0;
		while (0 != num) {
			num = (num & (num - 1));
			count++;
		}
		return count;
	}
